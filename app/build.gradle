
plugins {
    id 'com.android.application'
}
apply plugin: 'stringfog'

// 导入RandomKeyGenerator类，如果使用HardCodeKeyGenerator，更换下类名
import com.github.megatronking.stringfog.plugin.StringFogMode
import com.github.megatronking.stringfog.plugin.kg.HardCodeKeyGenerator

stringfog {
    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'lin.xposed.LinStringForImpl'
    // 可选：StringFog会自动尝试获取packageName，如果遇到获取失败的情况，可以显式地指定。
    packageName 'lin.xposed'
    // 可选：加密开关，默认开启。
    enable true
    // 可选：指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['lin',"top.linl"]
    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
    kg new HardCodeKeyGenerator("LIN")
    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
    // 也可以使用text或者bytes
    mode StringFogMode.bytes
}


String buildType
android {
    // 注意请加上此配置
    buildFeatures {
        buildConfig = true
    }

    namespace 'lin.xposed'
    compileSdk 33
    defaultConfig {
        applicationId "lin.xposed"
        minSdk 28
        //noinspection ExpiredTargetSdkVersion
        targetSdk 29
        versionCode 60
        versionName parseVersionCode(versionCode)
    }

    buildTypes {
        release {
            buildType = "release"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildType = "debug"
        }
    }

    aaptOptions {
        additionalParameters '--allow-reserved-package-id','--package-id','0x28'
    }


    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            outputFileName = "QStory_${versionName}.apk"
        }
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res/dialog',
                    'src/main/res/item',
                    'src/main/res'
            ]
        }
    }
}


static String parseVersionCode(int ver) {
    StringBuilder sb = new StringBuilder()
    char[] VersionCode = ver.toString().toCharArray()
    sb.append(0)
    String der = "."
    for (int i = 0; i < VersionCode.length; i++) {
        sb.append(der)
        sb.append(VersionCode[i])
    }
    return sb.toString()
}


dependencies {

    def appcompat_version = "1.7.0-alpha02"
    //安卓依赖
    //noinspection GradleDependency,NotInterpolated
    implementation 'androidx.appcompat:appcompat:$appcompat_version'
    implementation 'com.google.android.material:material:1.9.0'

    implementation 'com.github.megatronking.stringfog:xor:5.0.0'

    //防止kt版本不匹配编译异常 (虽然没用到kt语言)
    implementation(platform('org.jetbrains.kotlin:kotlin-bom:1.8.20-RC'))

//    implementation(files('libs/ReflectUtils.jar'))
    //导入libs的jar
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])

    def libs = new File(rootDir.getPath() + "/libs/implementation")
    for (File module : libs.listFiles()) {
//        if (module.getName().startsWith("ReflectUtils")) continue;
        implementation(project(':'+module.getName()))
    }
    annotationProcessor project(':AnnotationProcessor') //引入注解处理器

}
